This is a temporary page documenting efforts to provide a continuous integration platform for Biopython. This effort is ad-hoc for now and this page will probably be deleted in the future.

Are you interested in helping testing Biopython for your preferred platform? Then read on.

We have a [http://buildbot.net Buildbot] system up to do integration testing. The information provided here is split in two main sections:

#Documentation for people maintaining volunteer testing machines. Of interest to users donating resources for testing.

#Information regarding server configuration. Of interest to both developers interested in the integration testing status and administrators of the buildbot central server.


=Volunteer integration testing=


==General instructions==

You will need to install buildbot on your system (*ONLY* the slave part). We strongly recommend version 0.8,1p1. Please see below more specific instructions for your operating system.

You will also need git installed.

After that you should contact the biopython development mailing list saying what you are willing to test (platform, python version, applications) to get a username and a password. With your username and password you can now configure your buildslave. Something like this:

buildslave create-slave your_slave_directory events.open-bio.org:9989 username password

Then you should start your slave with

buildslave start your_slave_directory

Remember to have the external applications that you wish to test (e.g. blast) correctly installed. You should also have all dependencies needed by Biopython installed (e.g. NumPy).

==Linux==

On linux you should make sure that the version of python you want to test is available by the name pythonM.m. E.g, if you offer to test for python 2.6, your python binary should be available by the name python2.6 This is the case in most distributions.

==Windows==
==Mac==
==Jython==

=Server configuration=

Buildbot has a server/client architecture where a central server schedules builds that are actually build and tested by the clients. The clients are typically volunteer machines. The main requirement of a public accessible server running Buildbot (twister based).

One note for people trying to install a Builbot server: It seems that Buildbot configuration files change a bit from version to version. Be sure to use the correct documentation for your version. Our examples are for 0.8.1p1.


==Workflow==

Understanding [http://buildbot.net/buildbot/docs/current/full.html Buildbot's architecture] might be important to understand the next paragraphs.

The starting point for any continuous integration will be any change made to the main repository. In Biopython's case, this is based on github.

github can inform buildbot that a change was committed using [http://help.github.com/post-receive-hooks/ Post receive service hooks] (Admin>Service Hooks on the Biopython github interface). This means that whenever there is a change, github can POST that to a list of specified URLs. One of those URLs will be a script that will call the buildbot master, informing that there are changes to the source. Buildbot can now act.

Buildbot is split in two parts: The master and (potentially several) slaves.

The master:

# Is informed of repository changes
# Makes decisions on what should be tested and when (schedules work for the slaves)
# Informs the outside world of results (via email, web, irc, ...)
# Has to be visible as a server with a public address

The slaves:

# Do the actual integration testing
# Can be donated by volunteers that want to help test for a specific platform
# Can be run anywhere
# We need at least 3 (one per major OS)

==Before Buildbot==

Before buildbot we have git. We need to inform buildbot of git changes. Recommended read is:
[http://www.apparatusproject.org/blog/2009/06/github-and-buildbot-continuous-integration/ github/buildbot integration].

While, from an architectural point of view it might seem convoluted/complex. The implementations is actually quite simple: a simple entry in github, a small cgi script and configuring buildbot to accept github's source.

The only problem is that Buildbot has no native support for github (at least to be informed of changes -- buildbot can download github code), so the solution is the aforementioned cgi script. For reference the correct source in buildbot is the generic PBChangeSource (see below)

==Builbot: general considerations==

Typical usage. Command line (configure, start, reconfig).
Different versions, different configurations

==Buildbot master==

Buildbot master is arguably the most complex part for configuration. Most decisions are made at this level. The suggestions below are just that, suggestions. A possible starting point.

The configuration is divided in:

===Slaves===

The list of slaves. Only listed slaves will be distributed work. Each slave has a password. Not a serious security issue (the probable worse thing that can happen is bogus reports from slaves)

===Sources===

The build sources. In our case Biopython's github. As there is no native support, we use the standard PBChangeSource.

===Schedulers===

Scheduling builders is where many decisions will fall upon. There are many options like a fast scheduling to test very recent changes with simple updates as soon as possible, or a daily build, doing a complete download.

Schedulers also seem to change from version to version of buildbot.

Currently there is a single periodic scheduler (once a day).

===Builders===

A builder is responsible for testing the source in a certain environment. The environment can be defined by things like the Python/Jython version, the OS, but also if it is a fast or slow build. The number of builders can explode quite easily: lets say 5 Python versions (2.5, 2.6, 2.7, 3.1 plus Jython 2.5.2) times 3 OSes times 2 build types (fast and slow) and where are at 30 builds.

The two most important parameters of a build are: the slave that implements the build and the list of steps the slave has to do. There are typically:

#Get the source (either a light update or a full download), for this buildbot has github support.
#Compile the source
#Run the tests

===Status targets===

Targets are systems that relay information on the test outcomes. Typical targets are:

#Buildbot webserver. A web address where developers and users can check the results of previous builds
#Email addresses. To be warned of outcomes of builders
#IRC channels
#...

There is a main buildbot webserver. There are two types of users: the general audience that can check the results. Admins which can stop the server, restart builds, etc...

===Identity===
===Debugging===